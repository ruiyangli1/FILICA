[{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"about","dir":"Articles","previous_headings":"","what":"About","title":"Demo","text":"file, demonstrate implementation FI-LICA, well LICA, R, MAR MCAR settings. version file printed-results can also seen GitHub website, named Demo.html. Note: LICA implemented using MATLAB functions, called R MATLAB scripts called R run LICA named code_*.m (.e., code_completer.m, code_filica_update.m, code_nomiss.m, code_replace0.m). Please make sure change path path/FILICA/MATLAB_code/flica script based folder location! Details User guideline section . Caution: run FI-LICA completer case analysis time code interfere !","code":""},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"user-guideline","dir":"Articles","previous_headings":"","what":"User guideline","title":"Demo","text":"Create new folder computer, named FILICA, set working directory R current FILICA folder Download ./MATLAB_code/flica folder GitHub website, place FILICA folder Open following MATLAB scripts FILICA/MATLAB_code/flica folder: code_completer.m, code_filica_update.m, code_nomiss.m, code_replace0.m, change path first command line PATH/FILICA/MATLAB_code/flica based folder location","code":""},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Demo","text":"following demonstrates use functions FILICA package.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"load-packages","dir":"Articles","previous_headings":"Examples","what":"Load packages","title":"Demo","text":"","code":"sessionInfo()[[1]]$version.string  library(FILICA)  library(tidyverse)    library(scales)      # plot dF curve breaks_log10 <- function(x) {   low <- floor(log10(min(x)))   high <- ceiling(log10(max(x)))   10^(seq.int(low, high)) }"},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"mcar-setting","dir":"Articles","previous_headings":"Examples","what":"MCAR setting","title":"Demo","text":"n = 100 miss 5% data","code":""},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"lica-on-no-missing-data","dir":"Articles","previous_headings":"Examples > MCAR setting","what":"LICA on no-missing data","title":"Demo","text":"","code":"# -- generate data --  data0 = data_generate_MCAR(nsubj = 100, seed = 7452, n_miss = 5) #--- n_miss doesn't matter b/c will only use no-miss data from data_generate() # prepare data in lists data = list(data0$Y1, data0$Y2)  # -- run LICA --  re_nomiss = LICA(data = data, ncomp = 5, niter = 1500, method = \"nomiss\")   # -- results --  ## last dF last_dF = re_nomiss$F.history[,length(re_nomiss$F.history)]-re_nomiss$F.history[,length(re_nomiss$F.history)-1] message(\"Last dF = \", last_dF)      ## H H_nomiss = re_nomiss$H H_nomiss_trans = t(H_nomiss); colnames(H_nomiss_trans) = paste0(\"est_comp\", 1:ncol(H_nomiss_trans))      ## concatenated XW XWstack_nomiss = do.call(rbind, lapply(1:2, function(k){    re_nomiss[[\"X\"]][[k]][[1]] %*% diag( as.vector(re_nomiss[[\"W\"]][[k]][[1]]) )    })) colnames(XWstack_nomiss) = paste0(\"est_comp\", 1:5)  ## dF curve F_hist = t(re_nomiss$F.history) F_hist_lag = lag(F_hist) dF = data.frame(dF = F_hist - F_hist_lag) dF$index = 1:nrow(dF) dF %>%    ggplot(aes(x = index, y = dF)) +    geom_point(alpha = 0.5) +    geom_path() +    annotation_logticks() +   scale_x_log10(breaks = breaks_log10,labels = trans_format(log10, math_format(10^.x))) +   scale_y_log10(breaks = breaks_log10,labels = trans_format(log10, math_format(10^.x))) +   labs(title = \"dF curve\") +    geom_hline(yintercept = 0.1, linetype = \"dashed\", color = \"blue\") +    theme_classic() ## best-matching component  ## truth XWstack_true = rbind(data0$XW1, data0$XW2) H_true = data0$H H_true_trans = t(H_true); colnames(H_true_trans) = paste0(\"true_comp\", 1:ncol(H_true_trans)) ## XW best = bestIC(XWstack_true, XWstack_nomiss)  ## H best_H = H_nomiss_trans[,paste0(\"est_\",best[,\"best_match\"])] cor_H = cor(H_true_trans, best_H)  ## output out = cbind(best, H_cor = as.numeric(diag(cor_H))) %>% as.data.frame() %>% mutate_at(3:4, as.numeric) colnames(out)[3] = \"XW_cor\" out"},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"lica-on-data-after-replacing-missing-with-0","dir":"Articles","previous_headings":"Examples > MCAR setting","what":"LICA on data after replacing missing with 0","title":"Demo","text":"","code":"# -- generate data --  data0 = data_generate_MCAR(nsubj = 100, seed = 7452, n_miss = 5)  # prepare data in lists data = list(data0$Y1_miss, data0$Y2_miss)  # -- run LICA --  re_replace0 = LICA(data = data, ncomp = 5, niter = 1500, method = \"replace0\")  # in case LICA stop early (e.g., n_miss=20), reduce flica_niter (by 25%) and rerun LICA until it works # stop if reduce 18 times but still not work flica_niter_used = 1500 stop_count = 1 while (class(re_replace0) == \"try-error\" & stop_count <= 18) {   flica_niter_used = ceiling(0.75 * flica_niter_used)   message(\"< Re-running LICA > ( \", flica_niter_used, \" iterations )\")   re_replace0 = LICA(data = data, ncomp = 5, niter = flica_niter_used, method = \"replace0\")   stop_count = stop_count + 1 }   # -- results --  ## last dF last_dF = re_replace0$F.history[,length(re_replace0$F.history)]-re_replace0$F.history[,length(re_replace0$F.history)-1] message(\"Last dF = \", last_dF)      ## H H_replace0 = re_replace0$H H_replace0_trans = t(H_replace0); colnames(H_replace0_trans) = paste0(\"est_comp\", 1:ncol(H_replace0_trans))  ## concatenated XW XWstack_replace0 = do.call(rbind, lapply(1:2, function(k){    re_replace0[[\"X\"]][[k]][[1]] %*% diag( as.vector(re_replace0[[\"W\"]][[k]][[1]]) )    })) colnames(XWstack_replace0) = paste0(\"est_comp\", 1:5)  ## dF curve F_hist = t(re_replace0$F.history) F_hist_lag = lag(F_hist) dF = data.frame(dF = F_hist - F_hist_lag) dF$index = 1:nrow(dF) dF %>%    ggplot(aes(x = index, y = dF)) +    geom_point(alpha = 0.5) +    geom_path() +    annotation_logticks() +   scale_x_log10(breaks = breaks_log10,labels = trans_format(log10, math_format(10^.x))) +   scale_y_log10(breaks = breaks_log10,labels = trans_format(log10, math_format(10^.x))) +   labs(title = \"dF curve\") +    geom_hline(yintercept = 0.1, linetype = \"dashed\", color = \"blue\") +    theme_classic() ## best-matching component  ## truth XWstack_true = rbind(data0$XW1, data0$XW2) H_true = data0$H H_true_trans = t(H_true); colnames(H_true_trans) = paste0(\"true_comp\", 1:ncol(H_true_trans)) ## XW best = bestIC(XWstack_true, XWstack_replace0)  ## H best_H = H_replace0_trans[,paste0(\"est_\",best[,\"best_match\"])] cor_H = cor(H_true_trans, best_H)  ## output out = cbind(best, H_cor = as.numeric(diag(cor_H))) %>% as.data.frame() %>% mutate_at(3:4, as.numeric) colnames(out)[3] = \"XW_cor\" out"},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"lica-on-completers","dir":"Articles","previous_headings":"Examples > MCAR setting","what":"LICA on completers","title":"Demo","text":"","code":"# -- generate data --  data0 = data_generate_MCAR(nsubj = 100, seed = 7452, n_miss = 5)  # prepare data in lists data = list(data0$Y1_miss, data0$Y2_miss)  # -- run LICA --  re_completer = LICA(data = data, ncomp = 5, niter = 1500, method = \"completer\")   # -- results --  ## last dF last_dF = re_completer$F.history[,length(re_completer$F.history)]-re_completer$F.history[,length(re_completer$F.history)-1] message(\"Last dF = \", last_dF)  ## H H_completer = re_completer$H H_completer_trans = t(H_completer); colnames(H_completer_trans) = paste0(\"est_comp\", 1:ncol(H_completer_trans))  ## concatenated XW XWstack_completers = do.call(rbind, lapply(1:2, function(k){    re_completer[[\"X\"]][[k]][[1]] %*% diag( as.vector(re_completer[[\"W\"]][[k]][[1]]) )    })) colnames(XWstack_completers) = paste0(\"est_comp\", 1:5)  ## dF curve F_hist = t(re_completer$F.history) F_hist_lag = lag(F_hist) dF = data.frame(dF = F_hist - F_hist_lag) dF$index = 1:nrow(dF) dF %>%    ggplot(aes(x = index, y = dF)) +    geom_point(alpha = 0.5) +    geom_path() +    annotation_logticks() +   scale_x_log10(breaks = breaks_log10,labels = trans_format(log10, math_format(10^.x))) +   scale_y_log10(breaks = breaks_log10,labels = trans_format(log10, math_format(10^.x))) +   labs(title = \"dF curve\") +    geom_hline(yintercept = 0.1, linetype = \"dashed\", color = \"blue\") +    theme_classic() ## best-matching component  ## truth XWstack_true = rbind(data0$XW1, data0$XW2) H_true = data0$H H_true_trans = t(H_true); colnames(H_true_trans) = paste0(\"true_comp\", 1:ncol(H_true_trans)) ## XW best = bestIC(XWstack_true, XWstack_completers)  ## H best_H = H_completer_trans[,paste0(\"est_\",best[,\"best_match\"])] all_miss_subj = sort(c(data0$subj1_miss,data0$subj2_miss)) cor_H = cor(H_true_trans[-all_miss_subj,], best_H) ## output out = cbind(best, H_cor = as.numeric(diag(cor_H))) %>% as.data.frame() %>% mutate_at(3:4, as.numeric) colnames(out)[3] = \"XW_cor\" out"},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"fi-lica","dir":"Articles","previous_headings":"Examples > MCAR setting","what":"FI-LICA","title":"Demo","text":"Results completer cases analysis (completer_results_saved_from_FILICA) also stored Environment process.","code":"# -- generate data --  data0 = data_generate_MCAR(nsubj = 100, seed = 7452, n_miss = 5)  # subjects with missing -- will be automatically identified by FI_LICA() if not provided ## Note: different missing subjects orders will lead to different results due to noise matrix added in step 2 subj_miss = list(data0$subj1_miss, data0$subj2_miss) # prepare data in lists data = list(data0$Y1_miss, data0$Y2_miss)  # -- run FI-LICA --  re_filica = FI_LICA(data = data, ncomp = 5, flica_niter = 1500, n = 20, flica_niter2 = 1000, rescale = TRUE, re_completer = NULL) ## or if want to use the saved results from completer case analysis: re_filica = FI_LICA(data = data, ncomp = 5, flica_niter = 1500, n = 20, flica_niter2 = 1000, rescale = TRUE, re_completer = re_completer)  # -- results -- ## number of modality mod_n = length(re_filica$results[[\"X\"]]) ## H H_filica = re_filica$results$H H_filica_trans = t(H_filica); colnames(H_filica_trans) = paste0(\"est_comp\", 1:ncol(H_filica_trans)) ## concatenated XW XW_filica = do.call(rbind, lapply(1:mod_n, function(k){    re_filica$results[[\"X\"]][[k]][[1]] %*% diag( as.vector(re_filica$results[[\"W\"]][[k]][[1]]) )    })) colnames(XW_filica) = paste0(\"est_comp\", 1:5)  ## convergence par(mfrow=c(1,2)) plot(re_filica$H_convergence, ylab = \"H_convergence\", type=\"l\") plot(re_filica$XW_convergence, ylab = \"XW_convergence\", type=\"l\") ## dF curve F_hist = re_filica$F_hist F_hist_lag = lag(F_hist) dF = data.frame(F_hist - F_hist_lag) colnames(dF) = paste0(\"update\", 1:20) dF$index = 1:nrow(dF) dF %>%    pivot_longer(1:20, names_to = \"update\", values_to = \"dF\") %>%    mutate(update = factor(update,levels = paste0(\"update\",1:20))) %>%    filter(update %in% c(paste0(\"update\",1:20))) %>%    ggplot(aes(x = index, y = dF)) +    geom_point(alpha = 0.5) +    geom_path() +    facet_wrap(~update) +   annotation_logticks() +   scale_x_log10(breaks = breaks_log10,labels = trans_format(log10, math_format(10^.x))) +   scale_y_log10(breaks = breaks_log10,labels = trans_format(log10, math_format(10^.x))) +   labs(title = \"dF curve in FI-LICA Step 2\") +    geom_hline(yintercept = 0.1, linetype = \"dashed\", color = \"blue\") +    theme_classic() ## best-matching component  ## truth XWstack_true = rbind(data0$XW1, data0$XW2) H_true = data0$H H_true_trans = t(H_true); colnames(H_true_trans) = paste0(\"true_comp\", 1:ncol(H_true_trans)) ## XW best = bestIC(XWstack_true, XW_filica)  ## H best_H = H_filica_trans[,paste0(\"est_\",best[,\"best_match\"])] cor_H = cor(H_true_trans, best_H) ## output out = cbind(best, H_cor = as.numeric(diag(cor_H))) %>% as.data.frame() %>% mutate_at(3:4, as.numeric) colnames(out)[3] = \"XW_cor\" out"},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"mar-setting-continuous-h","dir":"Articles","previous_headings":"Examples","what":"MAR setting (continuous H)","title":"Demo","text":"n = 100 miss 5% data code , expect using data_generate_MAR_ctnsH() instead data_generate_MCAR() data generation","code":""},{"path":"https://ruiyangli1.github.io/FILICA/articles/Demo.html","id":"mar-setting-mixed-h","dir":"Articles","previous_headings":"Examples","what":"MAR setting (mixed H)","title":"Demo","text":"n = 100 miss 5% data code , expect using data_generate_MAR() instead data_generate_MCAR() data generation","code":""},{"path":"https://ruiyangli1.github.io/FILICA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruiyang Li. Maintainer.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li R, Bowman FD, Lee S (2025). FILICA: Full Information Linked Independent Component Analysis (FI-LICA). R package version 1.0.0, https://ruiyangli1.github.io/FILICA/, https://github.com/ruiyangli1/FILICA/.","code":"@Manual{,   title = {FILICA: Full Information Linked Independent Component Analysis (FI-LICA)},   author = {Ruiyang Li and F. DuBois Bowman and Seonjoo Lee},   year = {2025},   note = {R package version 1.0.0, https://ruiyangli1.github.io/FILICA/},   url = {https://github.com/ruiyangli1/FILICA/}, }"},{"path":"https://ruiyangli1.github.io/FILICA/index.html","id":"filica","dir":"","previous_headings":"","what":"Full Information Linked Independent Component Analysis (FI-LICA)","title":"Full Information Linked Independent Component Analysis (FI-LICA)","text":"Full Information Linked Independent Component Analysis (FI-LICA)","code":""},{"path":"https://ruiyangli1.github.io/FILICA/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"Full Information Linked Independent Component Analysis (FI-LICA)","text":"package conducts Full Information Linked ICA algorithm (FI-LICA) handle missing data problem multimodal fusion LICA framework.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Full Information Linked Independent Component Analysis (FI-LICA)","text":"","code":"## install package # install.packages(\"devtools\") devtools::install_github(\"ruiyangli1/FILICA\")  ## load package library(FILICA)"},{"path":"https://ruiyangli1.github.io/FILICA/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Full Information Linked Independent Component Analysis (FI-LICA)","text":"demo example, please see .","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/FI_LICA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run FI-LICA — FI_LICA","title":"Function to run FI-LICA — FI_LICA","text":"function runs FI-LICA.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/FI_LICA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run FI-LICA — FI_LICA","text":"","code":"FI_LICA(   data,   ncomp = 5,   flica_niter = 1500,   n = 20,   flica_niter2 = 1000,   rescale = TRUE,   re_completer = NULL )"},{"path":"https://ruiyangli1.github.io/FILICA/reference/FI_LICA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run FI-LICA — FI_LICA","text":"data data different modalities lists ncomp number components used LICA flica_niter number LICA iterations used FI-LICA's Step 1 (initialization process; completer case analysis) n number FI-LICA updates flica_niter2 number LICA iterations used FI-LICA's Step 2 (optimization process) rescale rescale H XW (default TRUE) re_completer results completer case analysis. Default NULL completer case analysis run saved process; otherwise, given results used.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/FI_LICA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run FI-LICA — FI_LICA","text":"resulting list includes estimated results, convergence measures H XW, dF history FI-LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/FI_LICA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run FI-LICA — FI_LICA","text":"","code":"# generate data data = data_generate_MAR(nsubj = 100, seed = 7452, n_miss = 5) # data with missing in lists data = list(data$Y1_miss, data$Y2_miss) # run FI-LICA #re_filica = FI_LICA(data = data, ncomp = 5, flica_niter = 1500, n = 20, flica_niter2 = 1000, rescale = TRUE, re_completer = NULL) # or #re_completer = LICA(data = data, ncomp = 5, niter = 1500, method = \"completer\") #re_filica = FI_LICA(data = data, ncomp = 5, flica_niter = 1500, n = 20, flica_niter2 = 1000, rescale = TRUE, re_completer = re_completer)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/LICA.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run LICA — LICA","title":"Function to run LICA — LICA","text":"function runs LICA -missing data two current practices missing data (complete case analysis replaceing missing 0s)","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/LICA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run LICA — LICA","text":"","code":"LICA(   data,   ncomp = 5,   niter = 1000,   method = c(\"nomiss\", \"completer\", \"replace0\") )"},{"path":"https://ruiyangli1.github.io/FILICA/reference/LICA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run LICA — LICA","text":"data data different modalities lists ncomp number components used LICA niter number iterations used LICA method LICA method. nomiss: running LICA -missing data. completer: running LICA complete cases. replace0: running LICA replacing missing 0s.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/LICA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run LICA — LICA","text":"resulting list includes results estimated LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/LICA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run LICA — LICA","text":"","code":"# e.g., LICA on no-missing data #LICA(data = data, ncomp = 5, niter = 1500, method = \"nomiss\")"},{"path":"https://ruiyangli1.github.io/FILICA/reference/bestIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to identify the best-matching component — bestIC","title":"Function to identify the best-matching component — bestIC","text":"function aims identify best-matching component reference component","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/bestIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to identify the best-matching component — bestIC","text":"","code":"bestIC(true, estimated)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/bestIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to identify the best-matching component — bestIC","text":"true reference data estimated estimated data, best-matching components identified","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/bestIC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to identify the best-matching component — bestIC","text":"resulting dataset gives best-matching component reference component","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/bestIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to identify the best-matching component — bestIC","text":"","code":"# generate data set.seed(1234) dat1 = mvtnorm::rmvnorm(n = 100, mean = rep(0, 2), sigma = matrix(c(1,0.8,0.8,1), nrow = 2, ncol = 2)) # sigma: covariance matrix dat2 = mvtnorm::rmvnorm(n = 100, mean = rep(0, 2), sigma = matrix(c(1,0.5,0.5,1), nrow = 2, ncol = 2)) dat3 = matrix(rnorm(300, 0, 1), nrow = 100, ncol = 3) true = cbind(dat1[,1],dat2[,1]); estimated = cbind(dat1[,2],dat2[,2],dat3) colnames(true) = paste0(\"comp\", 1:2); colnames(estimated) = paste0(\"comp\", 1:5) # find the best-matching component cor(true, estimated) #>            comp1     comp2      comp3        comp4      comp5 #> comp1  0.8214027 0.0266890  0.0633228 -0.001277715 0.02306397 #> comp2 -0.0544349 0.5411846 -0.1132938  0.108466171 0.06570640 bestIC(true, estimated) #>      ref_comp best_match cor_val             #> [1,] \"comp1\"  \"comp1\"    \"0.821402695788267\" #> [2,] \"comp2\"  \"comp2\"    \"0.541184602809223\""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_complete.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to keep the complete cases — data_complete","title":"Function to keep the complete cases — data_complete","text":"function keeps complete cases input modality data","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_complete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to keep the complete cases — data_complete","text":"","code":"data_complete(data_list)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_complete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to keep the complete cases — data_complete","text":"data_list input modality data (list)","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_complete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to keep the complete cases — data_complete","text":"resulting dataset data containing complete cases (list)","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_complete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to keep the complete cases — data_complete","text":"","code":"# generate data dat = data_generate_MAR(nsubj = 100, seed = 1234, n_miss = 20) # missing data (stored in lists) dat_miss = NULL; dat_miss[[1]] = dat$Y1_miss; dat_miss[[2]] = dat$Y2_miss # keep complete cases (stored in lists) dat_complete = data_complete(dat_miss)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Data generation function for MAR (with H from a mixture distribution) — data_generate_MAR","title":"Data generation function for MAR (with H from a mixture distribution) — data_generate_MAR","text":"function generates simulation data (2 modalities) setting MAR, one continuous covariate (C1), one binary covariate (C2), H mixture distribution based C1 C2","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data generation function for MAR (with H from a mixture distribution) — data_generate_MAR","text":"","code":"data_generate_MAR(   nsubj = 100,   nvoxel1 = 1000,   nvoxel2 = 3000,   true_ncomp = 2,   seed = 1234,   n_miss = 5,   es_C1H1 = 0.5,   es_C2H2 = 0.5 )"},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data generation function for MAR (with H from a mixture distribution) — data_generate_MAR","text":"nsubj number subjects nvoxel1 number voxels modality 1 nvoxel2 number voxels modality 2 true_ncomp number true component seed seed n_miss number missing subjects es_C1H1 correlation first covariate (C1, continuous) first component H (H1) es_C2H2 cohen's d second covariate (C2, binary) second component H (H2)","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data generation function for MAR (with H from a mixture distribution) — data_generate_MAR","text":"resulting dataset lists including -missing data (Y1, Y2), order subjects implemented missing (subj1_miss, subj2_miss), missing data (Y1_miss, Y2_miss), intermediate parameters data generation process.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data generation function for MAR (with H from a mixture distribution) — data_generate_MAR","text":"","code":"dat = data_generate_MAR(nsubj = 100, seed = 1234, n_miss = 5); names(dat) #>  [1] \"Y1\"         \"Y2\"         \"H\"          \"X1\"         \"X2\"         #>  [6] \"W1\"         \"W2\"         \"XW1\"        \"XW2\"        \"subj1\"      #> [11] \"subj2\"      \"subj1_miss\" \"subj2_miss\" \"subj\"       \"Y1_miss\"    #> [16] \"Y2_miss\"    \"seed\"       \"C1\"         \"C2\"         \"H1\"         #> [21] \"H2\""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR_ctnsH.html","id":null,"dir":"Reference","previous_headings":"","what":"Data generation function for MAR (with continuous H) — data_generate_MAR_ctnsH","title":"Data generation function for MAR (with continuous H) — data_generate_MAR_ctnsH","text":"function generates simulation data (2 modalities) setting MAR, two continuous covariates (C1,C2) H","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR_ctnsH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data generation function for MAR (with continuous H) — data_generate_MAR_ctnsH","text":"","code":"data_generate_MAR_ctnsH(   nsubj = 100,   nvoxel1 = 1000,   nvoxel2 = 3000,   true_ncomp = 2,   seed = 1234,   n_miss = 5,   es_C1H1 = 0.5,   es_C2H2 = 0.3 )"},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR_ctnsH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data generation function for MAR (with continuous H) — data_generate_MAR_ctnsH","text":"nsubj number subjects nvoxel1 number voxels modality 1 nvoxel2 number voxels modality 2 true_ncomp number true component seed seed n_miss number missing subjects es_C1H1 correlation first covariate (C1) first component H (H1) es_C2H2 correlation second covariate (C2) second component H (H2)","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR_ctnsH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data generation function for MAR (with continuous H) — data_generate_MAR_ctnsH","text":"resulting dataset lists including -missing data (Y1, Y2), order subjects implemented missing (subj1_miss, subj2_miss), missing data (Y1_miss, Y2_miss), intermediate parameters data generation process.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MAR_ctnsH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data generation function for MAR (with continuous H) — data_generate_MAR_ctnsH","text":"","code":"dat = data_generate_MAR_ctnsH(nsubj = 100, seed = 1234, n_miss = 5); names(dat) #>  [1] \"Y1\"         \"Y2\"         \"H\"          \"X1\"         \"X2\"         #>  [6] \"W1\"         \"W2\"         \"XW1\"        \"XW2\"        \"subj1\"      #> [11] \"subj2\"      \"subj1_miss\" \"subj2_miss\" \"subj\"       \"Y1_miss\"    #> [16] \"Y2_miss\"    \"seed\"       \"C1\"         \"C2\"         \"H1\"         #> [21] \"H2\""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MCAR.html","id":null,"dir":"Reference","previous_headings":"","what":"Data generation function for MCAR — data_generate_MCAR","title":"Data generation function for MCAR — data_generate_MCAR","text":"function generates simulation data (2 modalities) setting MCAR","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MCAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data generation function for MCAR — data_generate_MCAR","text":"","code":"data_generate_MCAR(   nsubj = 100,   nvoxel1 = 1000,   nvoxel2 = 3000,   true_ncomp = 2,   seed = 1234,   n_miss = 5 )"},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MCAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data generation function for MCAR — data_generate_MCAR","text":"nsubj number subjects nvoxel1 number voxels modality 1 nvoxel2 number voxels modality 2 true_ncomp number true component seed seed n_miss number missing subjects","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MCAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data generation function for MCAR — data_generate_MCAR","text":"resulting dataset lists including -missing data (Y1, Y2), order subjects implemented missing (subj1_miss, subj2_miss), missing data (Y1_miss, Y2_miss), intermediate parameters data generation process.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_generate_MCAR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data generation function for MCAR — data_generate_MCAR","text":"","code":"dat = data_generate_MCAR(nsubj = 100, seed = 1234, n_miss = 5); names(dat) #>  [1] \"Y1\"         \"Y2\"         \"H\"          \"X1\"         \"X2\"         #>  [6] \"W1\"         \"W2\"         \"XW1\"        \"XW2\"        \"subj1\"      #> [11] \"subj2\"      \"subj1_miss\" \"subj2_miss\" \"Y1_miss\"    \"Y2_miss\"    #> [16] \"seed\""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_standardization.html","id":null,"dir":"Reference","previous_headings":"","what":"Data standardization function — data_standardization","title":"Data standardization function — data_standardization","text":"function standardizes input data","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_standardization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data standardization function — data_standardization","text":"","code":"data_standardization(raw_data)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_standardization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data standardization function — data_standardization","text":"raw_data input data","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_standardization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data standardization function — data_standardization","text":"resulting dataset standardized data","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/data_standardization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data standardization function — data_standardization","text":"","code":"dat = data_generate_MCAR(nsubj = 100, seed = 1234, n_miss = 5); head(dat$Y1[,1:5]) #>           [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] -1.455015  4.4325139 -0.1385899 -1.2657233 -0.3303383 #> [2,] -1.931601  3.6904397 -0.4001167 -0.6398729 -1.2939863 #> [3,]  0.110446 -0.8910078  2.9783519  0.4348456 -0.3905672 #> [4,] -2.875821  7.9262359 -0.4975126 -0.5333830  1.2906608 #> [5,] -1.421581  2.6181680 -1.0322329 -0.4958435 -1.1244439 #> [6,] -1.112864 -0.9087328  0.9203492 -0.5078019 -0.6922695 Y1_std = data_standardization(dat$Y1); head(Y1_std[,1:5]) #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,] -0.8931014  2.2520840 -0.1898521 -0.7919797 -0.2922863 #> [2,] -0.9755383  1.7309787 -0.2382638 -0.3536852 -0.6685832 #> [3,]  0.1016464 -0.4653495  1.7253765  0.2853126 -0.1820137 #> [4,] -1.0023704  2.6487308 -0.1985009 -0.2106252  0.4059027 #> [5,] -0.8105817  1.4103736 -0.5965278 -0.3016340 -0.6472232 #> [6,] -0.4687322 -0.3745449  0.4694016 -0.1895536 -0.2746678"},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step1.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run Step 1 in FI-LICA — filica_step1","title":"Function to run Step 1 in FI-LICA — filica_step1","text":"function runs Step 1 FI-LICA.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run Step 1 in FI-LICA — filica_step1","text":"","code":"filica_step1(re, rescale = TRUE)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run Step 1 in FI-LICA — filica_step1","text":"re saved results completer case analysis using LICA rescale rescale H XW (default TRUE)","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run Step 1 in FI-LICA — filica_step1","text":"resulting list includes estimated H, XW, last dF Step 1 FI-LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run Step 1 in FI-LICA — filica_step1","text":"","code":"# run Step 1 in FI-LICA #re_step1 = filica_step1(re = re_completer, rescale = TRUE) ## need subj_miss, mod_std, mod_std_complete"},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step2.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run Step 2 in FI-LICA — filica_step2","title":"Function to run Step 2 in FI-LICA — filica_step2","text":"function runs Step 2 FI-LICA.","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run Step 2 in FI-LICA — filica_step2","text":"","code":"filica_step2(n, ncomp, flica_niter2, H_prev, XW_prev, rescale = TRUE)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run Step 2 in FI-LICA — filica_step2","text":"n number FI-LICA updates ncomp number components used LICA flica_niter2 number iterations used LICA H_prev estimated H Step 1 XW_prev estimated XW Step 1 rescale rescale H XW (default TRUE)","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run Step 2 in FI-LICA — filica_step2","text":"resulting list includes estimated results, convergence measure H XW, dF history Step 2 FI-LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/filica_step2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run Step 2 in FI-LICA — filica_step2","text":"","code":"# results from Step 1 in FI-LICA #re_step1 = filica_step1(re = re_completer, rescale = TRUE) ## need subj_miss, mod_std, mod_std_complete # run Step 2 in FI-LICA #re_step2 = filica_step2(n = 20, ncomp = 5, flica_niter2 = 1000, H_prev = re_step1$H, XW_prev = re_step1$XW, rescale = TRUE)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_completer.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run LICA on complete cases — flica_completer","title":"Function to run LICA on complete cases — flica_completer","text":"function calls matlab function run LICA complete cases","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_completer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run LICA on complete cases — flica_completer","text":"","code":"flica_completer(ncomp, flica_niter)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_completer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run LICA on complete cases — flica_completer","text":"ncomp number components used LICA flica_niter number iterations used LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_completer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run LICA on complete cases — flica_completer","text":"resulting dataset results estimated LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_completer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run LICA on complete cases — flica_completer","text":"","code":"# Save data at \"./MATLAB_code/flica/data_std.mat\" #writeMat(\"./MATLAB_code/flica/data_std.mat\", #         mod1_std_cmplt = mod1_std_cmplt, mod2_std_cmplt = mod2_std_cmplt # complete cases from standardized missing data #         ) # Run LICA on completers #re_completer = flica_completer(ncomp = 5, flica_niter = 1500)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_nomiss.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run LICA on no-missing data — flica_nomiss","title":"Function to run LICA on no-missing data — flica_nomiss","text":"function calls matlab function run LICA -missing data","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_nomiss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run LICA on no-missing data — flica_nomiss","text":"","code":"flica_nomiss(ncomp, flica_niter)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_nomiss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run LICA on no-missing data — flica_nomiss","text":"ncomp number components used LICA flica_niter number iterations used LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_nomiss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run LICA on no-missing data — flica_nomiss","text":"resulting dataset results estimated LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_nomiss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run LICA on no-missing data — flica_nomiss","text":"","code":"# Save data at \"./MATLAB_code/flica/data_nomiss.mat\" #writeMat(\"./MATLAB_code/flica/data_nomiss.mat\", #         mod1_true = mod1_true, mod2_true = mod2_true  # simulated data w/ no missing (before standardization, code in matlab will do the standardization) #         ) # Run LICA on no-miss data #re_nomiss = flica_nomiss(ncomp = 5, flica_niter = 1500)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_replace0.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to run LICA on data after replacing missing with 0 — flica_replace0","title":"Function to run LICA on data after replacing missing with 0 — flica_replace0","text":"function calls matlab function run LICA data replacing missing 0","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_replace0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to run LICA on data after replacing missing with 0 — flica_replace0","text":"","code":"flica_replace0(ncomp, flica_niter)"},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_replace0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to run LICA on data after replacing missing with 0 — flica_replace0","text":"ncomp number components used LICA flica_niter number iterations used LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_replace0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to run LICA on data after replacing missing with 0 — flica_replace0","text":"resulting dataset results estimated LICA","code":""},{"path":"https://ruiyangli1.github.io/FILICA/reference/flica_replace0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to run LICA on data after replacing missing with 0 — flica_replace0","text":"","code":"# Save data at \"./MATLAB_code/flica/data_replace0.mat\" #writeMat(\"./MATLAB_code/flica/data_replace0.mat\", #         mod1_miss = mod1_replace0, mod2_miss = mod2_replace0,      # data with missing as 0 #         mod1_std = mod1_replace0_std, mod2_std = mod2_replace0_std # data with missing as 0 after standardization; code in matlab will use this #         ) # Run current practice: replace NA with 0 + LICA #re_replace0 = try(flica_replace0(ncomp = 5, flica_niter = 1500))"}]
